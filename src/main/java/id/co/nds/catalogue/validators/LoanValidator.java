package id.co.nds.catalogue.validators;

import java.sql.Timestamp;

import id.co.nds.catalogue.exception.ClientException;
import id.co.nds.catalogue.exception.NotFoundException;

public class LoanValidator {
    public void nullCheckLoanId(String id) throws ClientException {
        if(id == null) {
            throw new ClientException("Loan id is required");
        }
    }

    public void notNullCheckLoanId(String id) throws ClientException {
        if(id != null) {
            throw new ClientException("Loan id is autogenerated, do not input id");
        }
    }

    public void nullCheckUserId(Integer userId) throws ClientException {
        if(userId == null) {
            throw new ClientException("User id is required");
        }
    }

    public void nullCheckUserRole(String role) throws ClientException {
        if(role == null) {
            throw new ClientException("Role id is required");
        }
    }

    public void nullCheckLoanAmount(Double loanAmount) throws ClientException {
        if(loanAmount == null) {
            throw new ClientException("Loan amount is required");
        }
    }

    public void nullCheckLoanTerm(Integer loanTerm) throws ClientException {
        if(loanTerm == null) {
            throw new ClientException("Loan term is required");
        }
    }

    public void nullCheckInterestRate(Double interestRate) throws ClientException {
        if(interestRate == null) {
            throw new ClientException("Interest rate is required");
        }
    }

    public void nullCheckCustomerName(String customerName) throws ClientException {
        if(customerName == null) {
            throw new ClientException("Customer name is required");
        }
    }

    public void nullCheckStartDate(Timestamp startDate) throws ClientException {
        if(startDate == null) {
            throw new ClientException("Start date is required");
        }
    }
    
    public void nullCheckObject(Object o) throws NotFoundException {
        if(o == null) {
            throw new NotFoundException("Loan details not found");
        }
    }

    public void validateLoanId(String id) throws ClientException{
        if(id.length() != 10 || !id.startsWith("L")) {
            throw new ClientException("Loan id must contains 10 digits and starts with 'L'");
        }
    }

    public void validateUserId(Integer userId) throws ClientException{
        if(userId <= 0) {
            throw new ClientException("User Id is required");
        }
    }

    public void validateRoleId(String roleId) throws ClientException{
        if(roleId.length() != 5 || !roleId.startsWith("R")) {
            throw new ClientException("Role id must contains five digits and starts with 'R'");
        }
    }

    public void validateLoanAmount(Double loanAmount) throws ClientException {
        if(loanAmount < 0) {
            throw new ClientException("Loan amount must be positive integer number");
        }
    }

    public void validateLoanTerm(Integer loanTerm) throws ClientException {
        if(loanTerm < 0) {
            throw new ClientException("Loan term must be positive integer number");
        }
    }

    public void validateInterestRate(Double interestRate) throws ClientException {
        if(interestRate < 0) {
            throw new ClientException("Interest rate must be positive integer number");
        }
    }

    public void validateCustomerName(String customerName) throws ClientException {
        if(customerName.trim().equalsIgnoreCase("")) {
            throw new ClientException("Customer name is required");
        } if(customerName.trim().length() < 0) {
            throw new ClientException("Customer name is cannot using whitespace");
        }
    }

    public void validateStartDate(Timestamp startDate) throws ClientException {
        if(startDate == null) {
            throw new ClientException("Start date is required");
        }
    }
}